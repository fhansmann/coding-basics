# Example 1: Basic example of decorator defined by class

class decorator(object):

    def __init__(self, func):
        self.func = func

    def __call__(self, *args):
        print('Called {func} with args: {args}'.format(func=self.func.__name__, args=args))
        return self.func(*args)

@decorator
def func(x,y):
    return x,y

func(1,2)
    
# Output: "Called func with args: (1, 2)"

___
# Example 2
# Do not fully understand the following example (as of 19 Feb 2020)

class property_(object):
    def __init__(self, func):
        self.func = func
        self.name = func.__name__

    def __get__(self, instance, cls):
        print('Called property from {instance} of {klass}'.format(instance=instance, klass=cls))
        return self.func(instance)

    def __set__(self, obj, value):
        print('Setting up {value} for {obj}'.format(value=value, obj=obj))
        [setattr(obj, k, v) for k, v in value.items()]


class Apple(object):

    @property_
    def get_color(self):
        print('Accessing get_color property')
        return "red"

apple = Apple()
print(apple.get_color)
apple.get_color = {"shape":"triangle"}
print(apple.shape)

***

Output:
Called property from <__main__.Apple object at 0x7ff05de056d0> of <class '__main__.Apple'>
Accessing get_color property
red
Setting up {'shape': 'triangle'} for <__main__.Apple object at 0x7ff05de056d0>
triangle
Deleting <__main__.Apple object at 0x7ff05de056d0>
***
___
# Example 3: One can also decorate classes and functions at the same time

def decorator(F):
    def wrapper(*args):
        print('Called {}'.format(args))
    return wrapper

@decorator
def func(x, y):
    print(x,y)

class C(object):
    @decorator
    def method(self, x, y):
        print(x,y)


c = C()
c.method(1,2)
func(3,4)

***
Called (<__main__.C object at 0x7f28ce438590>, 1, 2)
Called (3, 4)
***

Kudos to: https://krzysztofzuraw.com/blog/2016/python-class-decorators.html
